// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4212.MyRobot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drive_TrainRight;
    public static SpeedController drive_TrainLeft;
    public static RobotDrive drive_TrainRobot_Drive;
    public static SpeedController elevatorElevator;
    public static SpeedController armArm;
    public static SpeedController pickupPickup;
    public static PowerDistributionPanel sensorsPowerDistributionPanel;
    public static DigitalInput sensorsLimitSwitch1;
    public static DigitalInput sensorsLimitSwitch2;
    public static AnalogGyro sensorsGyro;
    public static AnalogAccelerometer sensorsAccelerometer;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive_TrainRight = new Spark(1);
        LiveWindow.addActuator("Drive_Train", "Right", (Spark) drive_TrainRight);
        
        drive_TrainLeft = new Spark(0);
        LiveWindow.addActuator("Drive_Train", "Left", (Spark) drive_TrainLeft);
        
        drive_TrainRobot_Drive = new RobotDrive(drive_TrainLeft, drive_TrainRight);
        
        drive_TrainRobot_Drive.setSafetyEnabled(true);
        drive_TrainRobot_Drive.setExpiration(0.1);
        drive_TrainRobot_Drive.setSensitivity(0.5);
        drive_TrainRobot_Drive.setMaxOutput(1.0);

        elevatorElevator = new VictorSP(2);
        LiveWindow.addActuator("Elevator", "Elevator", (VictorSP) elevatorElevator);
        
        armArm = new VictorSP(3);
        LiveWindow.addActuator("Arm", "Arm", (VictorSP) armArm);
        
        pickupPickup = new Talon(4);
        LiveWindow.addActuator("Pickup", "Pickup", (Talon) pickupPickup);
        
        sensorsPowerDistributionPanel = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Sensors", "PowerDistributionPanel", sensorsPowerDistributionPanel);
        
        sensorsLimitSwitch1 = new DigitalInput(0);
        LiveWindow.addSensor("Sensors", "Limit Switch 1", sensorsLimitSwitch1);
        
        sensorsLimitSwitch2 = new DigitalInput(1);
        LiveWindow.addSensor("Sensors", "Limit Switch 2", sensorsLimitSwitch2);
        
        sensorsGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Sensors", "Gyro", sensorsGyro);
        sensorsGyro.setSensitivity(0.007);
        sensorsAccelerometer = new AnalogAccelerometer(1);
        LiveWindow.addSensor("Sensors", "Accelerometer", sensorsAccelerometer);
        sensorsAccelerometer.setSensitivity(0.0);
        sensorsAccelerometer.setZero(2.5);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
